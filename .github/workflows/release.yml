name: release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: Type (major | minor | patch | test)
        required: true
        default: "test"

jobs:
  release:
    runs-on: ubuntu-latest
    name: Release
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get template branch names as JSON
        id: branches
        shell: bash -l {0}
        run: |
          # Exit on error
          set -e

          # Clone the template
          git clone https://github.com/rodluger/showyourwork-template
          cd showyourwork-template
          git fetch

          # Print branch names to file
          git branch -r | tee branches.txt

          # Convert to a JSON list
          sed -i '/->/d' branches.txt
          sed -i -e 's/origin\///' branches.txt
          sed -i -e 's/ //g' branches.txt
          sed -i -e 's/^/\"/' branches.txt
          sed -i -e 's/$/\"/' branches.txt
          BRANCHES=[$(awk -vORS=, '{ print $1 }' branches.txt | sed 's/,$//')]

          # Output the list
          echo "::set-output name=branches::${BRANCHES}"
          echo "Will update the following template branches: ${BRANCHES}"

      - name: Install node packages
        run: npm install semver nunjucks fs

      - name: Bump version
        uses: actions/github-script@v4
        id: bump
        if: ${{ github.event.inputs.release_type != 'test' }}
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release_type }}
        with:
          result-encoding: string
          script: |
            // Import modules
            const semver = require("semver");
            const nunjucks = require("nunjucks");
            const fs = require("fs");

            // Get all tags
            const tags = await github.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            // Get latest version
            var latest = "0.0.0";
            for (let i = 0; i < tags.data.length; i++) {
              const tag = tags.data[i].name;
              if ((tag[0] == "v") && semver.valid(tag.slice(1))) {
                if (semver.gt(tag.slice(1), latest)) {
                  latest = tag.slice(1);
                }
              }
            }

            // Bump the version
            const {RELEASE_TYPE} = process.env;
            latest = semver.inc(latest, RELEASE_TYPE);
            if (latest == null) {
              core.setFailed(`Invalid release type: ${RELEASE_TYPE}`);
            }

            // Update the README from the template
            const branches = JSON.parse('${{ steps.branches.outputs.branches }}');
            nunjucks.configure('.github/workflows', { autoescape: true });
            const README = nunjucks.render('README.md', { version: latest, branches: branches });
            fs.writeFileSync('README.md', README);

            // Push to repo
            await exec.exec("git", ["add", "README.md"]);
            await exec.exec("git", ["-c", "user.name='gh-actions", "-c", "user.email='gh-actions'", "commit", "-m", `[skip ci] Update docs link to v${latest}`]);
            await exec.exec("git", ["push", "origin", "main"]);

            // Create release w/ new version
            await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${latest}`
            });

            // Return new version
            return `v${latest}`;

    outputs:
      version: ${{ steps.bump.outputs.result }}
      branches: ${{ steps.branches.outputs.branches }}

  update-template:
    runs-on: ubuntu-latest
    name: Update template
    needs: release
    strategy:
      matrix:
        branch: ${{ fromJson(needs.release.outputs.branches) }}
    steps:
      - name: Update showyourwork-template and showyourwork-example
        if: ${{ github.event.inputs.release_type != 'test' }}
        id: template
        shell: bash -l {0}
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          VERSION: ${{ needs.release.outputs.version }}
          BRANCH: ${{ matrix.branch }}
        run: |
          # Exit on error
          set -e

          # Update the template
          git clone --recurse-submodules --single-branch --branch ${BRANCH} https://github.com/rodluger/showyourwork-template
          cd showyourwork-template/showyourwork
          git fetch --all --tags
          git checkout tags/${VERSION}
          cd ..
          git add showyourwork
          git -c user.name='gh-actions' -c user.email='gh-actions' commit -m "update showyourwork to ${VERSION}"
          git push https://x-access-token:${ACCESS_TOKEN}@github.com/rodluger/showyourwork-template ${BRANCH}

          # Now update the example repo (an instance of the template)
          git push --force https://x-access-token:${ACCESS_TOKEN}@github.com/rodluger/showyourwork-example ${BRANCH}

      - name: Update showyourwork-example-dev
        if: ${{ github.event.inputs.release_type == 'test' }}
        id: example-dev
        shell: bash -l {0}
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          BRANCH: ${{ matrix.branch }}
        run: |
          # Exit on error
          set -e

          # Update the template
          git clone --recurse-submodules --single-branch --branch ${BRANCH} https://github.com/rodluger/showyourwork-template
          cd showyourwork-template
          pushd showyourwork
          git fetch
          git checkout ${GITHUB_REF}
          git pull
          popd
          git add showyourwork
          git -c user.name='gh-actions' -c user.email='gh-actions' commit -m "showyourwork test run" || echo "nothing to commit"

          # Now update the example-dev repo (an instance of the template)
          git push --force https://x-access-token:${ACCESS_TOKEN}@github.com/rodluger/showyourwork-example-dev ${BRANCH}
